{
    "clojure": {
        "exts": [
            "clj"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "constant", 
                "regex": "^\\s*\\([\\x20\\t]*def(once)?[\\x20\\t]+(?P<names>[^\\[\\]\\(\\)\\{\\}\"\\s]+)", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "function", 
                "regex": "^\\s*\\([\\x20\\t]*defn(-|inline|multi)?[\\x20\\t]+(?P<names>[^\\[\\]\\(\\)\\{\\}\"\\s]+)", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "macro", 
                "regex": "^\\s*\\([\\x20\\t]*defmacro[\\x20\\t]+(?P<names>[^\\[\\]\\(\\)\\{\\}\"\\s]+)", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "struct", 
                "regex": "^\\s*\\([\\x20\\t]*defrecord[\\x20\\t]+(?P<names>[^\\[\\]\\(\\)\\{\\}\"\\s]+)", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "method", 
                "regex": "^\\s*\\([\\x20\\t]*defmethod[\\x20\\t]+(?P<names>[^\\[\\]\\(\\)\\{\\}\"\\s]+)", 
                "scope": []
            }
        ]
    }, 
    "coffee": {
        "exts": [
            "coffee"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "class", 
                "regex": "^\\s*class[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "method", 
                "regex": "^[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*[:=][\\x20\\t]*(\\([^\\n)]*\\))?[\\x20\\t]*->$", 
                "scope": [
                    "class"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "function", 
                "regex": "^(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*[:=][\\x20\\t]*(\\([^\\n)]*\\))?[\\x20\\t]*->$", 
                "scope": [
                    "ROOT"
                ]
            }
        ]
    }, 
    "css": {
        "exts": [
            "css", 
            "less", 
            "scss"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "misc", 
                "regex": "^\\s*(?P<name>[^\\{\\}]+)\\s*\\{", 
                "scope": []
            }
        ]
    }, 
    "java": {
        "exts": [
            "java"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "class", 
                "regex": "^\\s*class[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "interface", 
                "regex": "^\\s*interface[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "class_variable", 
                "regex": "^\\s*(?:[^\\n]*[\\x20\\t]+)?static[\\x20\\t]+[^\\n]+[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*(?:\\s*,\\s*[a-zA-Z_][a-zA-Z0-9_]*)*))[\\x20\\t]*[;=]", 
                "scope": [
                    "class"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "instance_variable", 
                "regex": "^\\s*[^\\n]+[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*(?:\\s*,\\s*[a-zA-Z_][a-zA-Z0-9_]*)*))[\\x20\\t]*[;=]", 
                "scope": [
                    "class"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "method", 
                "regex": "^\\s*[^\\n]+[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*\\(", 
                "scope": [
                    "class", 
                    "interface"
                ]
            }
        ]
    }, 
    "lua": {
        "exts": [
            "lua"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "method", 
                "regex": "^function[\\x20\\t]+(?P<parents>(?:[a-zA-Z_][a-zA-Z0-9_]*))\\:(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*\\(", 
                "scope": [
                    "ROOT"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "method", 
                "regex": "^function[\\x20\\t]+(?P<parents>(?:[a-zA-Z_][a-zA-Z0-9_]*))\\.(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*\\([\\x20\\t]*self", 
                "scope": [
                    "ROOT"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "function", 
                "regex": "^function[\\x20\\t]+((?P<parents>(?:[a-zA-Z_][a-zA-Z0-9_]*))\\.)?(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*\\(", 
                "scope": [
                    "ROOT"
                ]
            }
        ]
    }, 
    "objc": {
        "exts": [
            "m", 
            "mm"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "class", 
                "regex": "^\\s*@interface[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]+\\:", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "category", 
                "regex": "^\\s*@interface[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*\\([\\x20\\t]*(?:[a-zA-Z_][a-zA-Z0-9_]*)[\\x20\\t]*\\)", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "category_implementation", 
                "regex": "^\\s*@implementation[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*\\([\\x20\\t]*(?:[a-zA-Z_][a-zA-Z0-9_]*)[\\x20\\t]*\\)", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "class_implementation", 
                "regex": "^\\s*@implementation[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "protocol", 
                "regex": "^\\s*@protocol[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 1, 
                "kind": "property", 
                "regex": "^\\s*@property[^\\n;]*[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*;", 
                "scope": [
                    "class", 
                    "category", 
                    "protocol"
                ]
            }, 
            {
                "implicitindent": 1, 
                "kind": "method_interface", 
                "regex": "^(?P<name>\\-[^\\n\\{\\;]+)[\\x20\\t]*;", 
                "scope": [
                    "class", 
                    "category", 
                    "protocol"
                ]
            }, 
            {
                "implicitindent": 1, 
                "kind": "class_method_interface", 
                "regex": "^(?P<name>\\+[^\\n\\{\\;]+)[\\x20\\t]*;", 
                "scope": [
                    "class", 
                    "category", 
                    "protocol"
                ]
            }, 
            {
                "implicitindent": 1, 
                "kind": "method", 
                "regex": "^(?P<name>\\-[^\\n\\{\\;]+)[\\x20\\t]*", 
                "scope": [
                    "class_implementation", 
                    "category_implementation"
                ]
            }, 
            {
                "implicitindent": 1, 
                "kind": "class_method", 
                "regex": "^(?P<name>\\+[^\\n\\{\\;]+)[\\x20\\t]*", 
                "scope": [
                    "class_implementation", 
                    "category_implementation"
                ]
            }
        ]
    }, 
    "php": {
        "exts": [
            "php", 
            "php5"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "class", 
                "regex": "^\\s*([a-z\\s]+[\\x20\\t]+)?class[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "interface", 
                "regex": "^\\s*([a-z\\s]+[\\x20\\t]+)?interface[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "trait", 
                "regex": "^\\s*([a-z\\s]+[\\x20\\t]+)?trait[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "namespace", 
                "regex": "^\\s*([a-z\\s]+[\\x20\\t]+)?namespace[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "constant", 
                "regex": "^\\s*([a-z\\s]+[\\x20\\t]+)?const[\\x20\\t]+([a-z\\s]+[\\x20\\t]+)?(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*(?:\\s*,\\s*[a-zA-Z_][a-zA-Z0-9_]*)*))[\\x20\\t]*=", 
                "scope": [
                    "class"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "class_property", 
                "regex": "^\\s*([a-z\\s]+[\\x20\\t]+)?static[\\x20\\t]+([a-z\\s]+[\\x20\\t]+)?(?P<names>\\$(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*[;=]", 
                "scope": [
                    "class"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "property", 
                "regex": "^\\s*([a-z\\s]+[\\x20\\t]+)?(?P<names>\\$(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*[;=]", 
                "scope": [
                    "class"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "method", 
                "regex": "^\\s*([a-z\\s]+[\\x20\\t]+)?function[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*\\(", 
                "scope": [
                    "class", 
                    "interface", 
                    "trait"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "function", 
                "regex": "^\\s*([a-z\\s]+[\\x20\\t]+)?function[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))[\\x20\\t]*\\(", 
                "scope": []
            }
        ]
    }, 
    "python": {
        "exts": [
            "py"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "class", 
                "regex": "^\\s*class[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "field", 
                "regex": "^\\s*(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*(?:\\s*,\\s*[a-zA-Z_][a-zA-Z0-9_]*)*))[\\x20\\t]+=", 
                "scope": [
                    "class"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "method", 
                "regex": "^\\s*def[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": [
                    "class"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "function", 
                "regex": "^def[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }
        ]
    }, 
    "r": {
        "exts": [
            "r"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "function", 
                "regex": "^(?P<names>[a-zA-Z_\\.][a-zA-Z0-9_\\.]*)[\\x20\\t]*<-[\\x20\\t]*function\\(", 
                "scope": [
                    "ROOT"
                ]
            }
        ]
    }, 
    "ruby": {
        "exts": [
            "rb"
        ], 
        "symbols": [
            {
                "implicitindent": 0, 
                "kind": "property", 
                "regex": "^\\s*attr_(?:writer|reader|accessor)[\\x20\\t]+\\:(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "namespace", 
                "regex": "^\\s*module[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "class", 
                "regex": "^\\s*class[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }, 
            {
                "implicitindent": 0, 
                "kind": "method", 
                "regex": "^\\s*def[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": [
                    "class"
                ]
            }, 
            {
                "implicitindent": 0, 
                "kind": "function", 
                "regex": "^\\s*def[\\x20\\t]+(?P<names>(?:[a-zA-Z_][a-zA-Z0-9_]*))", 
                "scope": []
            }
        ]
    }
}